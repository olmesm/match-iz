/*
 * match-iz
 * v1.7.3
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var matchiz=(()=>{var A=Object.defineProperty;var R=t=>A(t,"__esModule",{value:!0});var Z=typeof require!="undefined"?require:t=>{throw new Error('Dynamic require of "'+t+'" is not supported')};var W=(t,n)=>{R(t);for(var o in n)A(t,o,{get:n[o],enumerable:!0})};var Y={};W(Y,{against:()=>N,defined:()=>C,empty:()=>S,endsWith:()=>L,falsy:()=>T,gt:()=>D,gte:()=>H,inRange:()=>J,includes:()=>M,isArray:()=>r,isFunction:()=>s,isNumber:()=>b,isPojo:()=>u,isRegExp:()=>f,isString:()=>i,lt:()=>G,lte:()=>I,match:()=>q,not:()=>U,otherwise:()=>z,spread:()=>V,startsWith:()=>K,truthy:()=>Q,when:()=>B});var x=Object.prototype,w=x.toString,e=t=>typeof t,E=t=>w.call(t)==="[object Arguments]",r=t=>Array.isArray(t),s=t=>e(t)==="function",b=t=>e(t)==="number",F=t=>e(t)==="object"&&t!==null,f=t=>t instanceof RegExp,i=t=>e(t)==="string",u=t=>t===null||!F(t)||E(t)?!1:Object.getPrototypeOf(t)===x;function q(t){return(...n)=>N(...n)(t)}function N(...t){let n;return o=>t.find(m=>{let p=m(o),{matched:O,value:j}=p||{};return[O,j].every(s)?O(o)&&(n=j(o),!0):p&&(n=p)})&&n}var z=t=>n=>({matched:()=>!0,value:()=>s(t)?t(n):t}),B=t=>n=>o=>({matched:()=>c(t,o),value:()=>s(n)?i(o)&&f(t)?n(o.match(t)):n(o):n}),c=(t,n)=>u(t)?Object.keys(t).every(o=>c(t[o],n==null?void 0:n[o])):r(t)?r(n)?t.length===n.length&&t.every((o,m)=>c(o,n==null?void 0:n[m])):t.some(o=>c(o,n)):s(t)?t(n):i(n)&&f(t)?t.test(n):t===n||[t,n].every(Number.isNaN),S=t=>t!==t||!t&&t!==0&&t!==!1||r(t)&&!t.length||u(t)&&!Object.keys(t).length,C=t=>!S(t),D=t=>g(n=>n>t),G=t=>g(n=>n<t),H=t=>g(n=>n>=t),I=t=>g(n=>n<=t),J=(t,n)=>g(o=>o>=t&&o<=n),K=t=>P(n=>n.startsWith(t)),L=t=>P(n=>n.endsWith(t)),M=t=>X(n=>n.includes(t)),Q=t=>!!t,T=t=>!t,U=t=>n=>!c(t,n),V=t=>new Proxy({},{get:()=>t});function P(t){return n=>i(n)&&t(n)}function X(t){return n=>(r(n)||i(n))&&t(n)}function g(t){return n=>b(n)&&t(n)}return Y;})();
