/*
 * match-iz
 * v1.8.0
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var matchiz=(()=>{var A=Object.defineProperty;var W=t=>A(t,"__esModule",{value:!0});var $=typeof require!="undefined"?require:t=>{throw new Error('Dynamic require of "'+t+'" is not supported')};var w=(t,n)=>{W(t);for(var o in n)A(t,o,{get:n[o],enumerable:!0})};var _={};w(_,{against:()=>N,allOf:()=>C,anyOf:()=>S,defined:()=>D,empty:()=>P,endsWith:()=>Q,falsy:()=>X,gt:()=>G,gte:()=>J,inRange:()=>L,includedIn:()=>U,includes:()=>T,isArray:()=>r,isFunction:()=>s,isNumber:()=>O,isPojo:()=>u,isRegExp:()=>g,isString:()=>i,lt:()=>H,lte:()=>K,match:()=>q,not:()=>B,otherwise:()=>y,spread:()=>Y,startsWith:()=>M,truthy:()=>V,when:()=>z});var x=Object.prototype,E=x.toString,e=t=>typeof t,F=t=>E.call(t)==="[object Arguments]",r=t=>Array.isArray(t),s=t=>e(t)==="function",O=t=>e(t)==="number",I=t=>e(t)==="object"&&t!==null,g=t=>t instanceof RegExp,i=t=>e(t)==="string",u=t=>t===null||!I(t)||F(t)?!1:Object.getPrototypeOf(t)===x;function q(t){return(...n)=>N(...n)(t)}function N(...t){let n;return o=>t.find(m=>{let p=m(o),{matched:b,value:j}=p||{};return[b,j].every(s)?b(o)&&(n=j(o),!0):p&&(n=p)})&&n}var y=t=>n=>({matched:()=>!0,value:()=>s(t)?t(n):t}),z=t=>n=>o=>({matched:()=>c(t,o),value:()=>s(n)?i(o)&&g(t)?n(o.match(t)):n(o):n}),c=(t,n)=>u(t)?Object.keys(t).every(o=>c(t[o],n==null?void 0:n[o])):r(t)?r(n)?t.length===n.length&&t.every((o,m)=>c(o,n==null?void 0:n[m])):t.some(o=>c(o,n)):s(t)?t(n):i(n)&&g(t)?t.test(n):t===n||[t,n].every(Number.isNaN),B=t=>n=>!c(t,n),S=(...t)=>t.flat(),C=(...t)=>n=>t.flat().every(o=>c(o,n)),P=t=>t!==t||!t&&t!==0&&t!==!1||r(t)&&!t.length||u(t)&&!Object.keys(t).length,D=t=>!P(t),G=t=>f(n=>n>t),H=t=>f(n=>n<t),J=t=>f(n=>n>=t),K=t=>f(n=>n<=t),L=(t,n)=>f(o=>o>=t&&o<=n),M=t=>R(n=>n.startsWith(t)),Q=t=>R(n=>n.endsWith(t)),T=t=>Z(n=>n.includes(t)),U=S,V=t=>!!t,X=t=>!t,Y=t=>new Proxy({},{get:()=>t});function R(t){return n=>i(n)&&t(n)}function Z(t){return n=>(r(n)||i(n))&&t(n)}function f(t){return n=>O(n)&&t(n)}return _;})();
