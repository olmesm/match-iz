/*
 * match-iz
 * v1.9.0
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var A=Object.prototype,N=A.toString,m=t=>n=>typeof n===t,S=t=>N.call(t)==="[object Arguments]",c=Array.isArray,e=m("function"),g=m("string"),j=t=>t===t&&m("number")(t),P=t=>t!==null&&m("object")(t),p=t=>t instanceof RegExp,u=t=>t===null||!P(t)||S(t)?!1:Object.getPrototypeOf(t)===A;function I(t){return(...n)=>w(...n)(t)}var w=(...t)=>{let n;return o=>t.find(r=>{let i=r(o),{matched:O,value:b}=i||{};return[O,b].every(e)?O(o)&&(n=b(o),!0):i&&(n=i)})&&n},q=t=>n=>({matched:()=>!0,value:()=>e(t)?t(n):t}),z=t=>n=>o=>({matched:()=>s(t,o),value:()=>e(n)?g(o)&&p(t)?n(o.match(t)):n(o):n}),s=(t,n)=>u(t)?Object.keys(t).every(o=>s(t[o],n==null?void 0:n[o])):c(t)?c(n)?t.length===n.length&&t.every((o,r)=>s(o,n==null?void 0:n[r])):t.some(o=>s(o,n)):e(t)?t(n):g(n)&&p(t)?t.test(n):t===n||[t,n].every(Number.isNaN),B=t=>n=>!s(t,n),R=(...t)=>t.flat(),C=(...t)=>n=>t.flat().every(o=>s(o,n)),W=t=>t!==t||!t&&t!==0&&t!==!1||c(t)&&!t.length||u(t)&&!Object.keys(t).length,D=t=>!W(t),G=t=>f(n=>n>t),H=t=>f(n=>n<t),J=t=>f(n=>n>=t),K=t=>f(n=>n<=t),L=(t,n)=>f(o=>o>=t&&o<=n),M=t=>x(n=>n.startsWith(t)),Q=t=>x(n=>n.endsWith(t)),T=t=>E(n=>n.includes(t)),U=R,V=(...t)=>n=>u(n)&&(([o,r])=>o.length&&o.every(i=>r.includes(i)))([t.flat(),Object.keys(n)]),X=t=>!!t,Y=t=>!t,Z=t=>new Proxy({},{get:()=>t}),x=t=>n=>g(n)&&t(n),f=t=>n=>j(n)&&t(n),E=t=>n=>(c(n)||g(n))&&t(n);export{w as against,C as allOf,R as anyOf,D as defined,W as empty,Q as endsWith,Y as falsy,G as gt,J as gte,V as hasOwn,L as inRange,U as includedIn,T as includes,c as isArray,e as isFunction,j as isNumber,u as isPojo,p as isRegExp,g as isString,H as lt,K as lte,I as match,B as not,q as otherwise,Z as spread,M as startsWith,X as truthy,z as when};
