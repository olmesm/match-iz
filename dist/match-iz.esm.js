/*
 * match-iz
 * v1.7.2
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var x=Object.prototype,e=x.toString,g=t=>typeof t,P=t=>e.call(t)==="[object Arguments]",r=t=>Array.isArray(t),s=t=>g(t)==="function",N=t=>g(t)==="number",E=t=>g(t)==="object"&&t!==null,b=t=>t instanceof RegExp,i=t=>g(t)==="string",u=t=>t===null||!E(t)||P(t)?!1:Object.getPrototypeOf(t)===x;function z(t){return(...o)=>R(...o)(t)}function R(...t){let o;return n=>t.find(m=>{let p=m(n),{matched:j,value:A}=p||{};return[j,A].every(s)?j(n)&&(o=A(n),!0):p&&(o=p)})&&o}var B=t=>o=>({matched:()=>!0,value:()=>s(t)?t(o):t}),C=t=>o=>n=>({matched:()=>f(t,n),value:()=>s(o)?i(n)&&b(t)?o(n.match(t)):o(n):o}),f=(t,o)=>u(t)?Object.keys(t).every(n=>O(t[n],o==null?void 0:o[n])):r(t)?r(o)?t.length===o.length&&t.every((n,m)=>O(n,o==null?void 0:o[m])):t.some(n=>f(n,o)):O(t,o),O=(t,o)=>u(t)||r(t)?f(t,o):s(t)?t(o):i(o)&&b(t)?t.test(o):t===o||[t,o].every(Number.isNaN),W=t=>t!==t||!t&&t!==0&&t!==!1||r(t)&&!t.length||u(t)&&!Object.keys(t).length,D=t=>!W(t),G=t=>c(o=>o>t),H=t=>c(o=>o<t),I=t=>c(o=>o>=t),J=t=>c(o=>o<=t),K=(t,o)=>c(n=>n>=t&&n<=o),L=t=>S(o=>o.startsWith(t)),M=t=>S(o=>o.endsWith(t)),Q=t=>w(o=>o.includes(t)),T=t=>!!t,U=t=>!t,V=t=>s(t)?o=>!t(o):o=>!f(t,o),X=t=>new Proxy({},{get:()=>t});function S(t){return o=>i(o)&&t(o)}function w(t){return o=>(r(o)||i(o))&&t(o)}function c(t){return o=>N(o)&&t(o)}export{R as against,D as defined,W as empty,M as endsWith,U as falsy,G as gt,I as gte,K as inRange,Q as includes,r as isArray,s as isFunction,N as isNumber,u as isPojo,b as isRegExp,i as isString,H as lt,J as lte,z as match,V as not,B as otherwise,X as spread,L as startsWith,T as truthy,C as when};
