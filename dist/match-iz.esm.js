/*
 * match-iz
 * v1.10.4
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var b=Object.prototype,P=b.toString,m=t=>n=>typeof n===t,j=t=>n=>n instanceof t,w=t=>P.call(t)==="[object Arguments]",e=Array.isArray,c=m("function"),f=m("string"),N=t=>t===t&&m("number")(t),A=t=>t!==null&&m("object")(t),u=j(RegExp),p=t=>t===null||!A(t)||w(t)?!1:Object.getPrototypeOf(t)===b;function y(t){return(...n)=>R(...n)(t)}var R=(...t)=>{let n;return o=>t.find(s=>{let r=s(o),{matched:O,value:x}=r||{};return[O,x].every(c)?O(o)&&(n=x(o),!0):r&&(n=r)})&&n},z=t=>n=>({matched:()=>!0,value:()=>c(t)?t(n):t}),B=t=>n=>o=>({matched:()=>i(t,o,s=>o=s),value:()=>c(n)?f(o)&&u(t)?n(o.match(t)):n(o):n}),i=(t,n,o)=>p(t)?Object.keys(t).every(s=>i(t[s],n==null?void 0:n[s],o)):e(t)?e(n)?t.length===n.length&&t.every((s,r)=>i(s,n==null?void 0:n[r],o)):t.some(s=>i(s,n,o)):c(t)?t(n,o):f(n)&&u(t)?t.test(n):t===n||[t,n].every(Number.isNaN),C=(...t)=>(n,o)=>t.length===0||(c(t[0])?t[0](n):i(t[0],n,o))?(o(n),!0):!1,D=t=>(n,o)=>!i(t,n,o),W=(...t)=>t.flat(),G=(...t)=>(n,o)=>t.flat().every(s=>i(s,n,o)),E=t=>t!==t||!t&&t!==0&&t!==!1||e(t)&&!t.length||p(t)&&!Object.keys(t).length,H=t=>!E(t),J=t=>g(n=>n>t),K=t=>g(n=>n<t),L=t=>g(n=>n>=t),M=t=>g(n=>n<=t),Q=(t,n)=>g(o=>o>=t&&o<=n),T=t=>S(n=>n.startsWith(t)),U=t=>S(n=>n.endsWith(t)),V=t=>F(n=>n.includes(t)),X=W,Y=(...t)=>n=>p(n)&&(([o,s])=>o.length&&o.every(r=>s.includes(r)))([t.flat(),Object.keys(n)]),Z=t=>!!t,_=t=>!t,$=t=>new Proxy({},{get:()=>t}),S=t=>n=>f(n)&&t(n),g=t=>n=>N(n)&&t(n),F=t=>n=>(e(n)||f(n))&&t(n);export{R as against,G as allOf,W as anyOf,H as defined,E as empty,U as endsWith,_ as falsy,J as gt,L as gte,Y as hasOwn,Q as inRange,X as includedIn,V as includes,j as instanceOf,e as isArray,c as isFunction,N as isNumber,p as isPojo,u as isRegExp,f as isString,K as lt,M as lte,y as match,D as not,z as otherwise,C as pluck,$ as spread,T as startsWith,Z as truthy,B as when};
