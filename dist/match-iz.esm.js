/*
 * match-iz
 * v1.8.0
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var j=Object.prototype,N=j.toString,e=t=>typeof t,S=t=>N.call(t)==="[object Arguments]",s=t=>Array.isArray(t),i=t=>e(t)==="function",A=t=>e(t)==="number",P=t=>e(t)==="object"&&t!==null,m=t=>t instanceof RegExp,c=t=>e(t)==="string",p=t=>t===null||!P(t)||S(t)?!1:Object.getPrototypeOf(t)===j;function q(t){return(...n)=>R(...n)(t)}function R(...t){let n;return o=>t.find(g=>{let u=g(o),{matched:O,value:b}=u||{};return[O,b].every(i)?O(o)&&(n=b(o),!0):u&&(n=u)})&&n}var y=t=>n=>({matched:()=>!0,value:()=>i(t)?t(n):t}),z=t=>n=>o=>({matched:()=>r(t,o),value:()=>i(n)?c(o)&&m(t)?n(o.match(t)):n(o):n}),r=(t,n)=>p(t)?Object.keys(t).every(o=>r(t[o],n==null?void 0:n[o])):s(t)?s(n)?t.length===n.length&&t.every((o,g)=>r(o,n==null?void 0:n[g])):t.some(o=>r(o,n)):i(t)?t(n):c(n)&&m(t)?t.test(n):t===n||[t,n].every(Number.isNaN),B=t=>n=>!r(t,n),W=(...t)=>t.flat(),C=(...t)=>n=>t.flat().every(o=>r(o,n)),w=t=>t!==t||!t&&t!==0&&t!==!1||s(t)&&!t.length||p(t)&&!Object.keys(t).length,D=t=>!w(t),G=t=>f(n=>n>t),H=t=>f(n=>n<t),J=t=>f(n=>n>=t),K=t=>f(n=>n<=t),L=(t,n)=>f(o=>o>=t&&o<=n),M=t=>x(n=>n.startsWith(t)),Q=t=>x(n=>n.endsWith(t)),T=t=>E(n=>n.includes(t)),U=W,V=t=>!!t,X=t=>!t,Y=t=>new Proxy({},{get:()=>t});function x(t){return n=>c(n)&&t(n)}function E(t){return n=>(s(n)||c(n))&&t(n)}function f(t){return n=>A(n)&&t(n)}export{R as against,C as allOf,W as anyOf,D as defined,w as empty,Q as endsWith,X as falsy,G as gt,J as gte,L as inRange,U as includedIn,T as includes,s as isArray,i as isFunction,A as isNumber,p as isPojo,m as isRegExp,c as isString,H as lt,K as lte,q as match,B as not,y as otherwise,Y as spread,M as startsWith,V as truthy,z as when};
