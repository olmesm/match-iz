/*
 * match-iz
 * v1.7.0
 * https://github.com/shuckster/match-iz
 * License: MIT
 */
var O=Object.prototype,S=O.toString,g=t=>typeof t,P=t=>S.call(t)==="[object Arguments]",s=t=>Array.isArray(t),r=t=>g(t)==="function",x=t=>g(t)==="number",E=t=>g(t)==="object"&&t!==null,p=t=>t instanceof RegExp,i=t=>g(t)==="string",u=t=>t===null||!E(t)||P(t)?!1:Object.getPrototypeOf(t)===O;function z(t){return(...o)=>R(...o)(t)}function R(...t){let o;return n=>t.find(f=>{let m=f(n),{matched:j,value:A}=m||{};return[j,A].every(r)?j(n)&&(o=A(n),!0):m&&(o=m)})&&o}var B=t=>o=>({matched:()=>!0,value:()=>r(t)?t(o):t}),C=t=>o=>n=>({matched:()=>b(t,n),value:()=>r(o)?i(n)&&p(t)?o(n.match(t)):o(n):o}),b=(t,o)=>u(t)?Object.keys(t).every(n=>e(t[n],o==null?void 0:o[n])):s(t)?s(o)?t.length===o.length&&t.every((n,f)=>e(n,o==null?void 0:o[f])):t.some(n=>b(n,o)):e(t,o),e=(t,o)=>u(t)||s(t)?b(t,o):r(t)?t(o):i(o)&&p(t)?t.test(o):t===o||[t,o].every(Number.isNaN),W=t=>t!==t||!t&&t!==0&&t!==!1||s(t)&&!t.length||u(t)&&!Object.keys(t).length,D=t=>!W(t),G=t=>c(o=>o>t),H=t=>c(o=>o<t),I=t=>c(o=>o>=t),J=t=>c(o=>o<=t),K=(t,o)=>c(n=>n>=t&&n<=o),M=t=>N(o=>o.startsWith(t)),Q=t=>N(o=>o.endsWith(t)),T=t=>w(o=>o.includes(t)),U=t=>!!t,V=t=>!t,X=t=>r(t)?o=>!t(o):o=>!Object.is(o,t),Y=t=>new Proxy({},{get:()=>t});function N(t){return o=>i(o)&&t(o)}function w(t){return o=>(s(o)||i(o))&&t(o)}function c(t){return o=>x(o)&&t(o)}export{R as against,D as defined,W as empty,Q as endsWith,V as falsy,G as gt,I as gte,K as inRange,T as includes,s as isArray,r as isFunction,x as isNumber,u as isPojo,p as isRegExp,i as isString,H as lt,J as lte,z as match,X as not,B as otherwise,Y as spread,M as startsWith,U as truthy,C as when};
